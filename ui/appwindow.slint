import { Button, VerticalBox } from "std-widgets.slint";
import { ChessBoard } from "components/chess_board/chessboard.slint";

export struct TranslationArgument {
    name: string,
    value: string,
}

export global Translator {
    pure callback translate(string, [TranslationArgument]) -> string;
}

component ToolbarButton {
    callback onClick <=> touch.clicked;
    
    touch := TouchArea {
        Rectangle {
            border-width: 1px;
            border-color: red;
            border-radius: 2px;
            @children
        }
    }
}

component Toolbar {
    callback onToggleBoardOrientation();
    Rectangle {
        width: 80%;
        height: 40px;
        border-width: 2px;
        border-color: blueviolet;
        border-radius: 10px;

        HorizontalLayout {
            alignment: center;
            padding: 4px;
            ToolbarButton {
                onClick => {
                    onToggleBoardOrientation();
                }
                width: parent.height - 2*parent.padding;
                height: parent.height - 2*parent.padding;
                Image {
                    source: @image-url("images/upDownArrows.svg");
                    width: 90%;
                    height: 90%;
                }
            }
        }
    }
}

export component AppWindow inherits Window {
    protected pure function tr(str: string, args: [TranslationArgument]) -> string {
        return Translator.translate(str, args);
    }
    width: 900px;
    height: 900px;
    in property pieces <=> board.pieces;
    in property whiteTurn <=> board.whiteTurn;
    property <bool> boardReversed: false;
    callback moveSubmitted <=> board.moveSubmit;

    VerticalLayout {
        padding: 20px;
        Toolbar {
            onToggleBoardOrientation => {
                boardReversed = !boardReversed;
            }
        }

        board:= ChessBoard {
            size: 500px;
            reversed: boardReversed;
            whiteTurn: false;
        }
    }
}
