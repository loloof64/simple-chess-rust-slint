export component ChessBoard {
    in property <length> size;
    in property <color> backgroundColor: cadetblue;
    in property <color> whiteCellColor: navajowhite;
    in property <color> blackCellColor: peru;
    in property <color> coordinatesColor: maroon;
    in property <bool> reversed: false;
    in property <bool> whiteTurn: true;
    in property <[[string]]> pieces: [
        ["r", "n", "b", "q", "k", "b", "n", "r"],
        ["p", "p", "p", "p", "p", "p", "p", "p"],
        ["", "", "", "", "", "", "", ""],
        ["", "", "", "", "", "", "", ""],
        ["", "", "", "", "", "", "", ""],
        ["", "", "", "", "", "", "", ""],
        ["P", "P", "P", "P", "P", "P", "P", "P"],
        ["R", "N", "B", "Q", "K", "B", "N", "R"],
    ];
    
    Rectangle {
        width: size;
        height: size;
        background: backgroundColor;

            for row in 8 : Rectangle {
                width: size;
                height: size / 9;
                x: 0;
                y: (size / 9) * (row+0.5);
                for col in 8 : Rectangle {
                    width: size / 9;
                    height: size / 9;
                    x: (size / 9) * (col+0.5);
                    background: mod(row+col, 2) == 0 ? whiteCellColor : blackCellColor;

                    if pieces[reversed ? 7-row : row][reversed ? 7-col : col] == "P" : Image {
                        source: @image-url("chess_vectors/Chess_plt45.svg");
                        width: size/9;
                        height: size/9;
                    }
                    if pieces[reversed ? 7-row : row][reversed ? 7-col : col] == "N" : Image {
                        source: @image-url("chess_vectors/Chess_nlt45.svg");
                        width: size/9;
                        height: size/9;
                    }
                    if pieces[reversed ? 7-row : row][reversed ? 7-col : col] == "B" : Image {
                        source: @image-url("chess_vectors/Chess_blt45.svg");
                        width: size/9;
                        height: size/9;
                    }
                    if pieces[reversed ? 7-row : row][reversed ? 7-col : col] == "R" : Image {
                        source: @image-url("chess_vectors/Chess_rlt45.svg");
                        width: size/9;
                        height: size/9;
                    }
                    if pieces[reversed ? 7-row : row][reversed ? 7-col : col] == "Q" : Image {
                        source: @image-url("chess_vectors/Chess_qlt45.svg");
                        width: size/9;
                        height: size/9;
                    }
                    if pieces[reversed ? 7-row : row][reversed ? 7-col : col] == "K" : Image {
                        source: @image-url("chess_vectors/Chess_klt45.svg");
                        width: size/9;
                        height: size/9;
                    }
                    if pieces[reversed ? 7-row : row][reversed ? 7-col : col] == "p" : Image {
                        source: @image-url("chess_vectors/Chess_pdt45.svg");
                        width: size/9;
                        height: size/9;
                    }
                    if pieces[reversed ? 7-row : row][reversed ? 7-col : col] == "n" : Image {
                        source: @image-url("chess_vectors/Chess_ndt45.svg");
                        width: size/9;
                        height: size/9;
                    }
                    if pieces[reversed ? 7-row : row][reversed ? 7-col : col] == "b" : Image {
                        source: @image-url("chess_vectors/Chess_bdt45.svg");
                        width: size/9;
                        height: size/9;
                    }
                    if pieces[reversed ? 7-row : row][reversed ? 7-col : col] == "r" : Image {
                        source: @image-url("chess_vectors/Chess_rdt45.svg");
                        width: size/9;
                        height: size/9;
                    }
                    if pieces[reversed ? 7-row : row][reversed ? 7-col : col] == "q" : Image {
                        source: @image-url("chess_vectors/Chess_qdt45.svg");
                        width: size/9;
                        height: size/9;
                    }
                    if pieces[reversed ? 7-row : row][reversed ? 7-col : col] == "k" : Image {
                        source: @image-url("chess_vectors/Chess_kdt45.svg");
                        width: size/9;
                        height: size/9;
                    }
                }
            }

            for file in 8: Text {
                x: (size/9) * (0.9 + (reversed ? (7-file) : file));
                y: (size/9) * 0.05;
                color: coordinatesColor;
                font-weight: 200;
                font-size: (size/27);
                text: ["A", "B", "C", "D", "E", "F", "G", "H"][file];
            }

            for file in 8: Text {
                x: (size/9) * (0.9 + (reversed ? (7-file) : file));
                y: (size/9) * 8.55;
                color: coordinatesColor;
                font-weight: 200;
                font-size: (size/27);
                text: ["A", "B", "C", "D", "E", "F", "G", "H"][file];
            }

            for rank in 8: Text {
                x: (size/9) * 0.15;
                y: (size/9) * (0.85 + (reversed ? rank : (7-rank)));
                color: coordinatesColor;
                font-weight: 200;
                font-size: (size/27);
                text: ["1", "2", "3", "4", "5", "6", "7", "8"][rank];
            }

            for rank in 8: Text {
                x: (size/9) * 8.65;
                y: (size/9) * (0.85 + (reversed ? rank : (7-rank)));
                color: coordinatesColor;
                font-weight: 200;
                font-size: (size/27);
                text: ["1", "2", "3", "4", "5", "6", "7", "8"][rank];
            }
            
            Rectangle {
                border-radius: size/36;
                x: (size/9) * 8.5;
                y: (size/9) * 8.5;
                width: size/18;
                height: size/18;
                background: whiteTurn? white : black;
            }
    }
}